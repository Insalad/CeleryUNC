local objs = {}
local threadIdentities = {}
local httpserv = game:GetService("HttpService")

getgenv().identifyexecutor = function()
    return "Salad Exploit", "v0.1"
end

getgenv().getexecutorname = function()
    return identifyexecutor()[1]
end

getgenv().gethui = function()
    return game:GetService("CoreGui")
end

local function trackobj(obj)
    table.insert(objs, obj)
end

local function createobj(name)
    local obj = {name = name}
    trackobj(obj)
    return obj
end

local obj1 = createobj("obj1")
local obj2 = createobj("obj2")

getgenv().getgc = function()
    return objs
end

getgenv().consolecreate = function(message, level)
    level = level or 1
    local prefix = "[" .. os.date("%Y-%m-%d %H:%M:%S") .. "]"
    local indent = string.rep("  ", level)
    print(prefix .. " " .. indent .. message)
end

getgenv().consoleinput = function(prompt) --not mine and idk who made it
    io.write(prompt .. " ")
    io.flush()
    local input = io.read()
    return input
end

getgenv().consoleprint = function(...) --not mine and idk who made it 
    local args = {...}
    for i, v in ipairs(args) do
        io.write(tostring(v))
        if i < #args then
            io.write(" ")
        end
    end
    io.write("\n")
    io.flush()
end


getgenv().replaceclosure = function(module, newfunc)  
    local script = getrenv().require(module)
    local originalfunc = getscriptclosure(module)
    for k, v in pairs(script) do
        if v == originalfunc then
            script[k] = newfunc
            break
        end
    end
end

local files = {}

local function startswith(str, start)
    return str:sub(1, #start) == start
end

local function endswith(str, ending)
    return ending == "" or str:sub(-#ending) == ending
end


getgenv().writefile = function(path, content)
    local Path = path:split('/')
    local CurrentPath = {}
    for i = 1, #Path do
        local a = Path[i]
        CurrentPath[i] = a
        if not files[table.concat(CurrentPath, '/')] and i ~= #Path then
            files[table.concat(CurrentPath, '/')] = {}
            files[table.concat(CurrentPath, '/') .. '/'] = files[table.concat(CurrentPath, '/')]
        elseif i == #Path then
            files[table.concat(CurrentPath, '/')] = tostring(content)
        end
    end
end

getgenv().makefolder = function(path)
    files[path] = {}
    files[path .. '/'] = files[path]
end

getgenv().isfolder = function(path)
    return type(files[path]) == 'table'
end

getgenv().isfile = function(path)
    return type(files[path]) == 'string'
end

getgenv().readfile = function(path)
    return files[path]
end

getgenv().appendfile = function(path, text)
    writefile(path, getgenv().readfile(path) .. text)
end

getgenv().delfolder = function(path)
    local f = files[path]
    if type(f) == 'table' then
        files[path] = nil
    end
end

getgenv().delfile = function(path)
    local f = files[path]
    if type(f) == 'string' then
        files[path] = nil
    end
end

getgenv().listfiles = function(path)
    if not path or path == '' then
        local Files = {}
        for i, v in pairs(files) do
            if #i:split('/') == 1 then
                table.insert(Files, i)
            end
        end
        return Files
    end
    if type(files[path]) ~= 'table' then
        error(path .. ' is not a folder.')
    end
    local Files = {}
    for i, v in pairs(files) do
        if startswith(i, path .. '/') and not endswith(i, '/') and i ~= path and #i:split('/') == (#path:split('/') + 1) then
            table.insert(Files, i)
        end
    end
    return Files
end


getgenv().isrbxactive = function()
    return game:IsLoaded()
end

getgenv().isgameactive = function()
    return game and game:IsActive()
end

getgenv().getinstances = function()
    return game:GetDescendants()
end

getgenv().setfpscap = function(fps)
    game:GetService("RunService").Stepped:Connect(function()
        game:GetService("RunService").RenderStepped:Wait()
    end)
    game:GetService("RunService").RenderStepped:Connect(function()
        game:GetService("RunService").Stepped:Wait()
        if fps and type(fps) == "number" and fps > 0 then
            game:GetService("RunService").RenderStepped:Wait(1 / fps)
        end
    end)
end

getgenv().getrunningscripts = function()
    local scripts = {}
    for _, script in ipairs(game:GetService("Players").LocalPlayer.PlayerScripts:GetChildren()) do
        if script:IsA("LocalScript") or script:IsA("ModuleScript") then
            table.insert(scripts, script)
        end
    end
    return scripts
end

getgenv().request = function(args)
    local Body = nil
    local Timeout = 0
    local function callback(success, body)
        Body = body
        Body['Success'] = success
    end
    httpserv:RequestInternal(args):Start(callback)
    while not Body and Timeout < 10 do
        task.wait(.1)
        Timeout = Timeout + .1
    end
    return Body
end

getgenv().http_request = function(url, method, headers, body)
    return getgenv().request({
        Url = url,
        Method = method,
        Headers = headers,
        Body = body
    })
end

getgenv().getscripts = function()
    local scripts = {}
    for _, script in pairs(game:GetDescendants()) do
        if script:IsA("ModuleScript") or script:IsA("LocalScript") then
            table.insert(scripts, script)
        end
    end
    return scripts
end

getgenv().fireclickdetector = function(detector, count, clicktype)
    count = count or 1
    clicktype = clicktype or "Click"
    
    if clicktype == "MouseHoverEnter" then
        detector.MouseHoverEnter:Connect(function()
            print("Mouse hovered over the detector")
        end)
    elseif clicktype == "MouseHoverLeave" then
        detector.MouseHoverLeave:Connect(function()
            print("Mouse left the detector")
        end)
    elseif clicktype == "Click" then
        detector.MouseClick:Connect(function(player)
            print("Player clicked the detector")
        end)
    else
        error("Invalid clickType")
    end
end

getgenv().getcustomasset = function(path)
    local content = readfile(path)
    if content then
        return "rbxasset://" .. content  
    else
        return nil
    end
end

getgenv().sethiddenproperty = function(obj, propertyname, value)
    local success, error = pcall(function()
        obj:SetAttribute(propertyname, value)
    end)
    
    if not success then
        error("Failed to set hidden property '" .. propertyname .. "': " .. tostring(error))
    end
    
    return true  
end

getgenv().isexecutorclosure = function(func)
    if type(func) ~= "function" then
        return false
    end

    local success, result = pcall(function()
        return newcclosure(func)
    end)

    local isRobloxGlobal = false
    local robloxGlobals = {
        print,
        warn,
        error,
        pcall,
        xpcall,
        spawn,
        delay,
        tick,
        wait,
        game,
        workspace,
        script
    }

    for _, globalFunc in ipairs(robloxGlobals) do
        if func == globalFunc then
            isRobloxGlobal = true
            break
        end
    end

    return success and type(result) == "function" and result ~= func and not isRobloxGlobal
end

local sha = loadstring(game:HttpGet("https://raw.githubusercontent.com/Insalad/libs/main/sha"))()

getgenv().getscripthash = function(script)
    if not script:IsA("LocalScript") and not script:IsA("ModuleScript") then
        return nil
    end
    
    local source = script.Source or script:GetAttribute("Source")
    if source then
        local hash = sha.sha1(source)
        return hash
    else
        return nil
    end
end

getgenv().setthreadidentity = function(identity)
    threadIdentities[coroutine.running()] = identity
end

getgenv().setidentity = setthreadidentity

getgenv().setthreadcontext = setidentity

getgenv().getthreadidentity = function()
    return threadIdentities[coroutine.running()] or 0  
end

local lz4lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/Insalad/libs/main/lz4"))()

getgenv().lz4compress = function(data)
    return lz4lib.compress(data)
end

getgenv().lz4decompress = function(compressed_data)
    return lz4lib.decompress(compressed_data)
end

getgenv().compareinstances = function(instance1, instance2)
    local function getInstanceProperties(instance)
        local properties = {}
        local success, propertyNames = pcall(function()
            return instance:GetAttributes()
        end)
        if success then
            for _, propertyName in ipairs(propertyNames) do
                properties[propertyName] = instance:GetAttribute(propertyName)
            end
        end
        return properties
    end

    local properties1 = getInstanceProperties(instance1)
    local properties2 = getInstanceProperties(instance2)

    for propName, propValue in pairs(properties1) do
        if properties2[propName] ~= propValue then
            return false
        end
    end

    for propName, propValue in pairs(properties2) do
        if properties1[propName] ~= propValue then
            return false
        end
    end

    return true
end

local hiddenProperties = {}

getgenv().gethiddenproperty = function(instance, property) --not sure if it works, probably not
    local instanceProperties = hiddenProperties[instance]
    if instanceProperties and instanceProperties[property] then
        return instanceProperties[property], true
    end
    return nil, false
end

getgenv().sethiddenproperty = function(instance, property, value)
    local instanceProperties = hiddenProperties[instance]
    if not instanceProperties then
        instanceProperties = {}
        hiddenProperties[instance] = instanceProperties
    end
    instanceProperties[property] = value
    return true
end

getgenv().getnilinstances = function(property)
    property = property or ""  
    
    local instances = {}
    for instance, properties in pairs(hiddenProperties) do
        if properties[property] == nil then
            table.insert(instances, instance)
        end
    end
    return instances
end

local clonedrefs = {}
getgenv().cloneref = function(x)
    if not clonedrefs[x] then clonedrefs[x] = {} end
    local o = newproxy(true)
    getmetatable(o).__type = "Instance"
    getmetatable(o).__index = function(self, k, v) local e = x[k] if type(e) == "function" then return function(s, ...) return e(x, ...) end end return e end
    getmetatable(o).__newindex = function(self, k, v) x[k] = v end
    getmetatable(o).__call = function(self, k, ...) return x[k](x, ...) end
    getmetatable(o).__tostring = function(self) return x.Name end
    getmetatable(o).__len = function(self) return error('attempt to get length of a userdata value') end
    getmetatable(o).__metatable = "The metatable is locked"
    table.insert(clonedrefs[x], o)
    return o
end
getgenv().compareinstances = function(a, b)
    if not clonedrefs[a] then
        return a == b
    else
        if table.find(clonedrefs[a], b) then return true end
    end
    return false
end

-- RENC START --


--things that arent mine start 
getgenv().customprint = function(text: string, properties: table, imageId: rbxasset)
    print(text)
    task.wait(.025)
    local msg = game:GetService("CoreGui").DevConsoleMaster.DevConsoleWindow.DevConsoleUI:WaitForChild("MainView").ClientLog[tostring(#game:GetService("CoreGui").DevConsoleMaster.DevConsoleWindow.DevConsoleUI.MainView.ClientLog:GetChildren())-1].msg
    for i, x in pairs(properties) do
        msg[i] = x
    end
    if imageId then
         msg.Parent.image.Image = imageId 
    end
end

getgenv().getdevice = function()
    local inputsrv = game:GetService("UserInputService")
    if inputsrv:GetPlatform() == Enum.Platform.Windows then
        return 'Windows'
    elseif inputsrv:GetPlatform() == Enum.Platform.OSX then
        return 'macOS'
    elseif inputsrv:GetPlatform() == Enum.Platform.IOS then
        return 'iOS'
    elseif inputsrv:GetPlatform() == Enum.Platform.UWP then
        return 'Windows (Microsoft Store)'
    elseif inputsrv:GetPlatform() == Enum.Platform.Android then
        return 'Android'
    else 
        return 'Unknown'
    end
end

getgenv().runanimation = function(animationId, player)
    local plr = player or getplayer()
    local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animation = Instance.new("Animation")
        animation.AnimationId = "rbxassetid://" .. tostring(animationId)
        humanoid:LoadAnimation(animation):Play()
    end
end

getgenv().getping = function(suffix: boolean)
    local rawping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
    local pingstr = rawping:sub(1,#rawping-7)
    local pingnum = tonumber(pingstr)
    local ping = tostring(math.round(pingnum))
    return not suffix and ping or ping.." ms"
end

getgenv().getfps = function(suffix: boolean)
    local rawfps = game:GetService("Stats").Workspace.Heartbeat:GetValue()
    local fpsnum = tonumber(rawfps)
    local fps = tostring(math.round(fpsnum))
    return not suffix and fps or fps.." fps"
end

getgenv().getplayers = function()
    local players = {}
    for _, x in pairs(game:GetService("Players"):GetPlayers()) do
        players[x.Name] = x
    end
    players["LocalPlayer"] = game:GetService("Players").LocalPlayer
    return players
end

getgenv().getplayer = function(name: string)
    return not name and getplayers()["LocalPlayer"] or getplayers()[name]
end

getgenv().getaffiliateid = function()
  return "salad-aff0"
end
--end of de things that arent mine

getgenv().getlocalplayer = function()
    return getplayer()
end

getgenv().firesignal = function(button, event) --button 💀
    if button and event and button[event] then
        local connections = getconnections(button[event])
        for _, connection in pairs(connections) do
            connection:Fire()
        end
    end
end

getgenv().messagebox = function(text, caption, flags) --sorta
	print(flags) -- no i am NOT doing every flag im too lazy so uhhh yes. 
	local Converted = {
		["_MessageBox"] = Instance.new("ScreenGui");
		["_Background"] = Instance.new("Frame");
		["_UICorner"] = Instance.new("UICorner");
		["_DropShadowHolder"] = Instance.new("Frame");
		["_DropShadow"] = Instance.new("ImageLabel");
		["_PanelUP"] = Instance.new("Frame");
		["_UICorner1"] = Instance.new("UICorner");
		["_Caption"] = Instance.new("TextLabel");
		["_Close"] = Instance.new("ImageButton");
		["_LocalScript"] = Instance.new("LocalScript");
		["_PanelDOWN"] = Instance.new("Frame");
		["_UICorner2"] = Instance.new("UICorner");
		["_OK"] = Instance.new("TextButton");
		["_UICorner3"] = Instance.new("UICorner");
		["_LocalScript1"] = Instance.new("LocalScript");
		["_Cancel"] = Instance.new("TextButton");
		["_UICorner4"] = Instance.new("UICorner");
		["_LocalScript2"] = Instance.new("LocalScript");
		["_Text"] = Instance.new("TextLabel");
	}

	Converted["_MessageBox"].ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	Converted["_MessageBox"].Name = "MessageBox"
	Converted["_MessageBox"].Parent = game:GetService("CoreGui")
	
	Converted["_Background"].BackgroundColor3 = Color3.fromRGB(53.000004440546036, 53.000004440546036, 53.000004440546036)
	Converted["_Background"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Background"].BorderSizePixel = 0
	Converted["_Background"].Position = UDim2.new(0.435079724, 0, 0.375545859, 0)
	Converted["_Background"].Size = UDim2.new(0.220956713, 0, 0.20960699, 0)
	Converted["_Background"].Name = "Background"
	Converted["_Background"].Parent = Converted["_MessageBox"]
    Converted["_Background"].Active = true 
    Converted["_Background"].Draggable = true 
	
	Converted["_UICorner"].Parent = Converted["_Background"]
	
	Converted["_DropShadowHolder"].BackgroundTransparency = 1
	Converted["_DropShadowHolder"].BorderSizePixel = 0
	Converted["_DropShadowHolder"].Size = UDim2.new(1, 0, 1, 0)
	Converted["_DropShadowHolder"].ZIndex = 0
	Converted["_DropShadowHolder"].Name = "DropShadowHolder"
	Converted["_DropShadowHolder"].Parent = Converted["_Background"]
	
	Converted["_DropShadow"].Image = "rbxassetid://6014261993"
	Converted["_DropShadow"].ImageColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_DropShadow"].ImageTransparency = 0.5
	Converted["_DropShadow"].ScaleType = Enum.ScaleType.Slice
	Converted["_DropShadow"].SliceCenter = Rect.new(49, 49, 450, 450)
	Converted["_DropShadow"].AnchorPoint = Vector2.new(0.5, 0.5)
	Converted["_DropShadow"].BackgroundTransparency = 1
	Converted["_DropShadow"].BorderSizePixel = 0
	Converted["_DropShadow"].Position = UDim2.new(0.5, 0, 0.5, 0)
	Converted["_DropShadow"].Size = UDim2.new(1.16151202, 0, 1.32638884, 0)
	Converted["_DropShadow"].ZIndex = 0
	Converted["_DropShadow"].Name = "DropShadow"
	Converted["_DropShadow"].Parent = Converted["_DropShadowHolder"]
	
	Converted["_PanelUP"].BackgroundColor3 = Color3.fromRGB(40.00000141561031, 40.00000141561031, 40.00000141561031)
	Converted["_PanelUP"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_PanelUP"].BorderSizePixel = 0
	Converted["_PanelUP"].Size = UDim2.new(1, 0, 0.180555552, 0)
	Converted["_PanelUP"].Name = "PanelUP"
	Converted["_PanelUP"].Parent = Converted["_Background"]
	
	Converted["_UICorner1"].Parent = Converted["_PanelUP"]
	
	Converted["_Caption"].Font = Enum.Font.SourceSans
	Converted["_Caption"].Text = caption
	Converted["_Caption"].TextColor3 = Color3.fromRGB(102.00000911951065, 102.00000911951065, 102.00000911951065)
	Converted["_Caption"].TextSize = 14
	Converted["_Caption"].TextXAlignment = Enum.TextXAlignment.Left
	Converted["_Caption"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Caption"].BackgroundTransparency = 1
	Converted["_Caption"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Caption"].BorderSizePixel = 0
	Converted["_Caption"].Position = UDim2.new(0.0274914093, 0, 0, 0)
	Converted["_Caption"].Size = UDim2.new(0.859106541, 0, 1, 0)
	Converted["_Caption"].Name = "Caption"
	Converted["_Caption"].Parent = Converted["_PanelUP"]
	
	Converted["_Close"].Image = "rbxassetid://6031094677"
	Converted["_Close"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Close"].BackgroundTransparency = 1
	Converted["_Close"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Close"].BorderSizePixel = 0
	Converted["_Close"].Position = UDim2.new(0.910652936, 0, 0.115384616, 0)
	Converted["_Close"].Size = UDim2.new(0.0687285215, 0, 0.769230783, 0)
	Converted["_Close"].Name = "Close"
	Converted["_Close"].Parent = Converted["_PanelUP"]
	
	Converted["_PanelDOWN"].BackgroundColor3 = Color3.fromRGB(40.00000141561031, 40.00000141561031, 40.00000141561031)
	Converted["_PanelDOWN"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_PanelDOWN"].BorderSizePixel = 0
	Converted["_PanelDOWN"].Position = UDim2.new(0, 0, 0.652777791, 0)
	Converted["_PanelDOWN"].Size = UDim2.new(1, 0, 0.347222209, 0)
	Converted["_PanelDOWN"].Name = "PanelDOWN"
	Converted["_PanelDOWN"].Parent = Converted["_Background"]
	
	Converted["_UICorner2"].Parent = Converted["_PanelDOWN"]
	
	Converted["_OK"].Font = Enum.Font.SourceSans
	Converted["_OK"].Text = "Ok"
	Converted["_OK"].TextColor3 = Color3.fromRGB(61.00000396370888, 61.00000396370888, 61.00000396370888)
	Converted["_OK"].TextSize = 14
	Converted["_OK"].BackgroundColor3 = Color3.fromRGB(25.000002309679985, 25.000002309679985, 25.000002309679985)
	Converted["_OK"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_OK"].BorderSizePixel = 0
	Converted["_OK"].Position = UDim2.new(0.0721649453, 0, 0.100000001, 0)
	Converted["_OK"].Size = UDim2.new(0.371134013, 0, 0.779999971, 0)
	Converted["_OK"].Name = "OK"
	Converted["_OK"].Parent = Converted["_PanelDOWN"]
	
	Converted["_UICorner3"].Parent = Converted["_OK"]
	
	Converted["_Cancel"].Font = Enum.Font.SourceSans
	Converted["_Cancel"].Text = "Cancel"
	Converted["_Cancel"].TextColor3 = Color3.fromRGB(61.00000396370888, 61.00000396370888, 61.00000396370888)
	Converted["_Cancel"].TextSize = 14
	Converted["_Cancel"].BackgroundColor3 = Color3.fromRGB(25.000002309679985, 25.000002309679985, 25.000002309679985)
	Converted["_Cancel"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Cancel"].BorderSizePixel = 0
	Converted["_Cancel"].Position = UDim2.new(0.560137451, 0, 0.100000001, 0)
	Converted["_Cancel"].Size = UDim2.new(0.371134013, 0, 0.779999971, 0)
	Converted["_Cancel"].Name = "Cancel"
	Converted["_Cancel"].Parent = Converted["_PanelDOWN"]
	
	Converted["_UICorner4"].Parent = Converted["_Cancel"]
	
	Converted["_Text"].Font = Enum.Font.SourceSans
	Converted["_Text"].Text = text
	Converted["_Text"].TextColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Text"].TextSize = 14
	Converted["_Text"].TextXAlignment = Enum.TextXAlignment.Left
	Converted["_Text"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Text"].BackgroundTransparency = 1
	Converted["_Text"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Text"].BorderSizePixel = 0
	Converted["_Text"].Position = UDim2.new(0.0274914093, 0, 0.180555552, 0)
	Converted["_Text"].Size = UDim2.new(0.951890051, 0, 0.472222209, 0)
	Converted["_Text"].Name = "Text"
	Converted["_Text"].Parent = Converted["_Background"]
	
	local fake_module_scripts = {}
	
	local function CUAUOSG_fake_script() 
		local script = Instance.new("LocalScript")
		script.Name = "LocalScript"
		script.Parent = Converted["_Close"]
		local req = require
		local require = function(obj)
			local fake = fake_module_scripts[obj]
			if fake then
				return fake()
			end
			return req(obj)
		end
	
		local messagebox = script.Parent.Parent.Parent.Parent 
		local close = script.Parent
		local proceed = false 
		close.MouseButton1Click:Connect(function()
			print(proceed)
			messagebox:Destroy()
		end)
	end
	local function GZGQI_fake_script() 
		local script = Instance.new("LocalScript")
		script.Name = "LocalScript"
		script.Parent = Converted["_OK"]
		local req = require
		local require = function(obj)
			local fake = fake_module_scripts[obj]
			if fake then
				return fake()
			end
			return req(obj)
		end
	
		local ok = script.Parent 
		local messagebox = script.Parent.Parent.Parent.Parent 
		local proceed = false
		ok.MouseButton1Click:Connect(function()
			proceed = true 
			print(proceed)
			messagebox:Destroy()
		end)
	end
	local function QGPMPA_fake_script() 
		local script = Instance.new("LocalScript")
		script.Name = "LocalScript"
		script.Parent = Converted["_Cancel"]
		local req = require
		local require = function(obj)
			local fake = fake_module_scripts[obj]
			if fake then
				return fake()
			end
			return req(obj)
		end
	
		local cancel = script.Parent 
		local messagebox = script.Parent.Parent.Parent.Parent 
		local proceed = false
		cancel.MouseButton1Click:Connect(function()
			print(proceed)
			messagebox:Destroy()
		end)
	end
	
	coroutine.wrap(CUAUOSG_fake_script)()
	coroutine.wrap(GZGQI_fake_script)()
	coroutine.wrap(QGPMPA_fake_script)()
end

--aliases
getgenv().firetouchtransmitter = firetouchinterest
getgenv().getplatform = getdevice
getgenv().getos = getdevice
getgenv().playanimation = runanimation


-- RENC   END --

loadstring(game:HttpGet("https://raw.githubusercontent.com/Insalad/moreuncong/main/yes"))() --moreunc yuh uh

print("loaded funcs")
